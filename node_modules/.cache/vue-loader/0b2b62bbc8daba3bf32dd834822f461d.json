{"remainingRequest":"/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stoneage/VUE.JS Projects/Zebu-Admin/src/views/chartData.vue?vue&type=template&id=4a7a1ffe&","dependencies":[{"path":"/home/stoneage/VUE.JS Projects/Zebu-Admin/src/views/chartData.vue","mtime":1654503973619},{"path":"/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stoneage/VUE.JS Projects/Zebu-Admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}